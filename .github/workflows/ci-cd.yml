name: CI-CD

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo

jobs:
  build-test-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt pytest

      - name: Run tests
        run: pytest -q

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-test-push
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-demo
      K8S_NAMESPACE: demo
    steps:
      - name: Prepare SSH key
        run: |
          echo "${{ secrets.SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Copy manifests to server
        run: |
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i key.pem" k8s/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/app/k8s/

      - name: Remote deploy to K3s
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -euo pipefail
          NAMESPACE="${K8S_NAMESPACE:-demo}"
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n "$NAMESPACE" -f /home/${USER}/app/k8s
          # Set image to the freshly built SHA
          kubectl set image -n "$NAMESPACE" deployment/demo app=${IMAGE_NAME}:${GITHUB_SHA} --record
          kubectl rollout status -n "$NAMESPACE" deploy/demo --timeout=120s
          kubectl get svc -n "$NAMESPACE" demo -o wide
          EOF
